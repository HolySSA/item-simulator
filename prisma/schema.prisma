// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accounts {
  accountId       Int      @id @default(autoincrement()) @map("accountId")
  userId          String   @unique @map("userId")
  password        String   @map("password")
  name            String   @map("name")
  age             Int      @map("age")

  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt() @map("updatedAt")

  // Accounts : Characters => 1 : N 관계 
  characters Characters[] @relation("AccountCharacters")

  @@map("Accounts")
}

model Characters {
  characterId   String   @id @map("characterId")
  accountId     Int      @map("accountId") // Accounts 테이블 참조 외래키
  name          String   @unique @map("name")  // 캐릭터 명 유일
  health        Int      @default(500) @map("health")
  power         Int      @default(100) @map("power")
  money         Int      @default(10000) @map("money")

  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt() @map("updatedAt")

  // Characters : Inventories => 1 : N
  inventories Inventories[]
  // Characters : Equipments => 1 : N
  equipments Equipments[]

  // Accounts 테이블과 관계 설정
  account Accounts @relation("AccountCharacters", fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("Characters")
}

model Items {
  item_id       Int      @id @default(autoincrement()) @map("item_id")
  item_code     Int      @unique @map("item_code")  // 아이템 코드 유일
  item_name     String   @unique @map("item_name")  // 아이템 명 유일
  item_stat     Json     @default("{}") @map("item_stat")
  item_slot     String?  @map("item_slot") // 장착 슬롯
  item_price    Int      @map("item_price")

  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt() @map("updatedAt")

  // Items : Inventories => 1 : N
  inventories Inventories[]
  // Items : Equipments => 1 : N
  equipments Equipments[]

  @@map("Items")
}

model Inventories {
  inventoryId   Int        @id @default(autoincrement()) @map("inventoryId")
  characterId   String     @map("characterId")
  item_code     Int        @map("item_code") // 아이템 코드
  count         Int        @default(1) @map("count")

  createdAt     DateTime   @default(now()) @map("createdAt")
  updatedAt     DateTime   @updatedAt() @map("updatedAt")

  // Characters 테이블과 관계 설정
  character Characters @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  // Items 테이블과 관계 설정
  item Items @relation(fields: [item_code], references: [item_code], onDelete: Cascade)

  @@map("Inventories")
}

model Equipments {
  equipmentId   Int        @id @default(autoincrement()) @map("equipmentId")
  characterId   String     @map("characterId")
  item_code     Int        @map("item_code") // 장착된 아이템 코드
  slot          String     @map("slot") // 장착 위치

  createdAt     DateTime   @default(now()) @map("createdAt")
  updatedAt     DateTime   @updatedAt() @map("updatedAt")

  // Characters 테이블과 관계 설정
  character Characters @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  // Items 테이블과 관계 설정
  item Items @relation(fields: [item_code], references: [item_code], onDelete: Cascade)

  @@map("Equipments")
}